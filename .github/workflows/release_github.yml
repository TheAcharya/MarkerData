name: release_github

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release after build'
        required: true
        default: 'no'
      
jobs:
  install:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Homebrew
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
    - name: Install NPM
      run: |
        brew install node

    - name: Install node-appdmg
      run: npm install -g appdmg
      
    - name: Create Distribution Directory
      run: mkdir -p dist/dmg-builds

    - name: Copy Local Distribution 
      run: |
        mkdir -p dist/dmg-builds
        cp -R ./Distribution/dmg-builds/. ./dist/dmg-builds

    - name: Verify Copied Files
      run: |
        echo "Checking copied files..."
        ls -l ./dist/dmg-builds
        ls -l ./dist/dmg-builds/latest-build
        ls -l ./dist/dmg-builds/uninstaller/include
        
    - name: Create Distribution Directory
      run: mkdir -p dist/dmg-builds/dmg-output
      
    - name: Verify Copied Files
      run: |
        echo "Checking copied files..."
        ls -l ./dist/dmg-builds/dmg-output

    - name: Prepare VM Directories
      run: |
        PARENT=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
        mkdir -p "$PARENT/dist/dmg-builds"
        mkdir -p "$PARENT/dist/dmg-builds/latest-build"
        mkdir -p "$PARENT/dist/dmg-builds/dmg-output"
        mkdir -p "$PARENT/dist/dmg-builds/uninstaller/include"
        
        cp -R ./Distribution/dmg-builds/uninstaller/include/applet.icns "$PARENT/dist/dmg-builds/uninstaller/include/"
        cp -R ./Distribution/dmg-builds/uninstaller/include/Uninstall\ Marker\ Data.scpt "$PARENT/dist/dmg-builds/uninstaller/include/"
        cp -R ./Distribution/dmg-builds/build-marker-data-dmg.json "$PARENT/dist/dmg-builds/"
        cp -R ./Distribution/dmg-builds/latest-build/Marker\ Data.app "$PARENT/dist/dmg-builds/latest-build/"
        cp -R ./Distribution/dmg-builds/dmg-background.png "$PARENT/dist/dmg-builds/"
        cp -R ./Distribution/dmg-builds/marker-data-dmg-icon.icns "$PARENT/dist/dmg-builds/"
        
    - name: Build Uninstaller
      run: |
        PARENT=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
        APP="$PARENT/dist/dmg-builds/latest-build/Uninstall Marker Data.app"
        SCRIPT="$PARENT/dist/dmg-builds/uninstaller/include/Uninstall Marker Data.scpt"
        ICON="$PARENT/dist/dmg-builds/uninstaller/include/applet.icns"

        rm -rf "$APP"
        osacompile -x -o "$APP" "$SCRIPT"
        cp "$ICON" "$APP"/Contents/Resources/applet.icns
        xattr -cr "$APP"

    - name: Verify Uninstaller
      run: |
        echo "Checking copied files..."
        ls -l ./dist/dmg-builds/latest-build
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install xmltodict

    - name: Extract Version from XML
      id: extract_version
      run: |
        VERSION=$(python - <<EOF
        import xmltodict
        with open('./appcast.xml') as f:
          rss_dict = xmltodict.parse(f.read())
          version = rss_dict['rss']['channel']['item'][0]['sparkle:shortVersionString']
          print(version)
        EOF
        )

        echo "VER=v$VERSION" >> $GITHUB_ENV

    - name: Create Environment Files
      run: |
        PARENT=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
        echo "PARENT=$PARENT" >> $GITHUB_ENV

    - name: Build DMG
      run: |
        JSON="${{ env.PARENT }}/dist/dmg-builds/build-marker-data-dmg.json"
        OUTPUT="${{ env.PARENT }}/dist/dmg-builds/dmg-output/Marker Data_"
        
        appdmg "$JSON" "$OUTPUT""${{ env.VER }}.dmg"
        
    - name: Verify DMG
      run: |
        echo "Checking copied files..."
        ls -l ./dist/dmg-builds/dmg-output
        

    - name: Save DMG as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: marker-data-dmg
        path: ${{ env.PARENT }}/dist/dmg-builds/dmg-output/Marker Data_${{ env.VER }}.dmg
    
    - name: Release Github
      if: ${{ github.event.inputs.release == 'yes' }}
      uses: ncipollo/release-action@v1
      with:
        artifacts: "${{ env.PARENT }}/dist/dmg-builds/dmg-output/Marker Data_${{ env.VER }}.dmg"
        token: ${{ secrets.GITHUB_TOKEN }}
        name: Marker Data ${{ env.VER }}
        tag: ${{ env.VER }}
        draft: true
