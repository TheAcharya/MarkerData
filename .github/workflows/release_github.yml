name: release_github

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release after build'
        required: true
        default: 'no'
      
jobs:
  install:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install node-appdmg
      run: npm install -g appdmg
      
    - name: Create Distribution Directory
      run: mkdir -p dist/dmg-builds

    - name: Copy Local Distribution 
      run: |
        mkdir -p dist/dmg-builds
        cp -R ./Distribution/dmg-builds/. ./dist/dmg-builds

    - name: Verify Copied Files
      run: |
        echo "Checking copied files..."
        ls -l ./dist/dmg-builds
        ls -l ./dist/dmg-builds/latest-build
        ls -l ./dist/dmg-builds/uninstaller/include
        
    - name: Create Distribution Directory
      run: mkdir -p dist/dmg-builds/dmg-output
      
    - name: Verify Copied Files
      run: |
        echo "Checking copied files..."
        ls -l ./dist/dmg-builds/dmg-output

    - name: Prepare VM Directories
      run: |
        PARENT=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
        mkdir -p "$PARENT/dist/dmg-builds"
        mkdir -p "$PARENT/dist/dmg-builds/latest-build"
        mkdir -p "$PARENT/dist/dmg-builds/dmg-output"
        mkdir -p "$PARENT/dist/dmg-builds/uninstaller/include"
        
        cp -R ./Distribution/dmg-builds/uninstaller/include/applet.icns "$PARENT/dist/dmg-builds/uninstaller/include/"
        cp -R ./Distribution/dmg-builds/uninstaller/include/Uninstall\ Marker\ Data.scpt "$PARENT/dist/dmg-builds/uninstaller/include/"
        cp -R ./Distribution/dmg-builds/build-marker-data-dmg.json "$PARENT/dist/dmg-builds/"
        cp -R ./Distribution/dmg-builds/latest-build/Marker\ Data.app "$PARENT/dist/dmg-builds/latest-build/"
        cp -R ./Distribution/dmg-builds/dmg-background.png "$PARENT/dist/dmg-builds/"
        cp -R ./Distribution/dmg-builds/marker-data-dmg-icon.icns "$PARENT/dist/dmg-builds/"
        
    - name: Build Uninstaller
      run: |
        PARENT=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
        UAPP="$PARENT/dist/dmg-builds/latest-build/Uninstall Marker Data.app"
        SCRIPT="$PARENT/dist/dmg-builds/uninstaller/include/Uninstall Marker Data.scpt"
        ICON="$PARENT/dist/dmg-builds/uninstaller/include/applet.icns"

        rm -rf "$UAPP"
        osacompile -x -o "$UAPP" "$SCRIPT"
        cp "$ICON" "$UAPP"/Contents/Resources/applet.icns
        xattr -cr "$UAPP"
        
    - name: Verify Uninstaller
      run: |
        echo "Checking copied files..."
        ls -l ./dist/dmg-builds/latest-build

    - name: Codesign Uninstaller
      env: 
        APPLE_CERT_DATA: ${{ secrets.APPLE_CERT_DATA }}
        APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
        KEYCHAIN_PASSWORD_U: ${{ secrets.KEYCHAIN_PASSWORD_U }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        PARENT=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
        UAPP="$PARENT/dist/dmg-builds/latest-build/Uninstall Marker Data.app"
        
        echo $APPLE_CERT_DATA | base64 --decode > certificate.p12
        security create-keychain -p $KEYCHAIN_PASSWORD_U build-u.keychain
        security default-keychain -s build-u.keychain
        security unlock-keychain -p $KEYCHAIN_PASSWORD_U build-u.keychain
        security import certificate.p12 -k build-u.keychain -P $APPLE_CERT_PASSWORD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD_U build-u.keychain
        /usr/bin/codesign --force -s $APPLE_TEAM_ID "$UAPP" -v
        
    - name: Verify Codesign Uninstaller
      run: |
        PARENT=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
        UAPP="$PARENT/dist/dmg-builds/latest-build/Uninstall Marker Data.app"

        /usr/bin/codesign -dv --verbose=4 "$UAPP"
        
    - name: Codesign Marker Data
      env: 
        APPLE_CERT_DATA: ${{ secrets.APPLE_CERT_DATA }}
        APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
        KEYCHAIN_PASSWORD_M: ${{ secrets.KEYCHAIN_PASSWORD_M }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        PARENT=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
        APP="$PARENT/dist/dmg-builds/latest-build/Marker Data.app"
        
        echo $APPLE_CERT_DATA | base64 --decode > certificate.p12
        security create-keychain -p $KEYCHAIN_PASSWORD_M build-m.keychain
        security default-keychain -s build-m.keychain
        security unlock-keychain -p $KEYCHAIN_PASSWORD_M build-m.keychain
        security import certificate.p12 -k build-m.keychain -P $APPLE_CERT_PASSWORD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD_M build-m.keychain
        /usr/bin/codesign --force -s $APPLE_TEAM_ID "$APP" -v
        
    - name: Verify Codesign Marker Data
      run: |
        PARENT=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
        APP="$PARENT/dist/dmg-builds/latest-build/Marker Data.app"

        /usr/bin/codesign -dv --verbose=4 "$APP"
        
    - name: Build DMG
      run: |
        PARENT=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
        VER=$(cat ./Distribution/version.txt)
        JSON="$PARENT/dist/dmg-builds/build-marker-data-dmg.json"
        OUTPUT="$PARENT/dist/dmg-builds/dmg-output/Marker-Data_"
        
        appdmg "$JSON" "$OUTPUT""$VER.dmg"
        
    - name: Verify DMG
      run: |
        echo "Checking copied files..."
        ls -l ./dist/dmg-builds/dmg-output
    
    - name: Create Environment Files
      run: |
        PARENT=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
        VER=$(cat ./Distribution/version.txt)
        echo "PARENT=$PARENT" >> $GITHUB_ENV
        echo "VER=$VER" >> $GITHUB_ENV

    - name: Save DMG as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: marker-data-dmg
        path: ${{ env.PARENT }}/dist/dmg-builds/dmg-output/Marker-Data_${{ env.VER }}.dmg
    
    - name: Release Github
      if: ${{ github.event.inputs.release == 'yes' }}
      uses: ncipollo/release-action@v1
      with:
        artifacts: "${{ env.PARENT }}/dist/dmg-builds/dmg-output/Marker-Data_${{ env.VER }}.dmg"
        token: ${{ secrets.GITHUB_TOKEN }}
        name: Marker Data ${{ env.VER }}
        tag: ${{ env.VER }}
        draft: true
